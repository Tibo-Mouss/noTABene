# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'noTABene_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import functools
import socket
import struct
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer
import concurrent.futures
import time
from PyQt5 import QtGui, QtWidgets

class Ui_MainWindow(object):
    socket = 1 #Socket de la communication entre raspberry et ordi, c'est une valeur opif là
    stop_flag = [False]

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 801, 601))
        self.tabWidget.setObjectName("tabWidget")
        self.Transcription_tab = QtWidgets.QWidget()
        self.Transcription_tab.setObjectName("Transcription_tab")
        self.TranscriptionBox = QtWidgets.QTextBrowser(self.Transcription_tab)
        self.TranscriptionBox.setGeometry(QtCore.QRect(10, 10, 771, 511))
        self.TranscriptionBox.setObjectName("TranscriptionBox")
        self.Communication_status = QtWidgets.QLabel(self.Transcription_tab)
        self.Communication_status.setGeometry(QtCore.QRect(620, 520, 151, 21))
        self.Communication_status.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Communication_status.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.Communication_status.setObjectName("Communication_status")
        self.tabWidget.addTab(self.Transcription_tab, "")
        self.Image_tab = QtWidgets.QWidget()
        self.Image_tab.setObjectName("Image_tab")
        self.graphicsView = QtWidgets.QGraphicsView(self.Image_tab)
        self.graphicsView.setGeometry(QtCore.QRect(10, 10, 771, 541))
        self.graphicsView.setObjectName("graphicsView")
        self.tabWidget.addTab(self.Image_tab, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Create a ThreadPoolExecutor
        executor = concurrent.futures.ThreadPoolExecutor()
        # Submit the function with its arguments to be executed by a worker thread
        self.socket = SetupCommunication()
        self.future = executor.submit(Receive_data, self, self.socket, self.stop_flag)

        # # Conectique du timer de la tab Série
        # self.timer_du_timer = QTimer()
        # #Cette ligne c pour ajouter un argument à la fonction de reception*
        # self.socket = SetupCommunication()
        # timerCallback = functools.partial(Receive_data, sock=self.socket)
        # self.timer_du_timer.timeout.connect(timerCallback)
        # self.timer_du_timer.start(1000)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "NoTABene"))
        self.Communication_status.setText(_translate("MainWindow", "Connexion Waiting"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Transcription_tab), _translate("MainWindow", "Transcription"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Image_tab), _translate("MainWindow", "Image"))


    def Print_Hello(self):
        self.TranscriptionBox.setText("Hello")

    def Display_Status(self, message, Disappear):
        self.Communication_status.setText(message)
        if (Disappear):
            QtCore.QTimer.singleShot(2000, self.Empty_Status)
    
    def Empty_Status(self):
        self.Communication_status.setText("")

    def FinishBackgroundTasks(self):
        self.stop_flag[0] = True
        # print("Signal sent")
        exit()

    def Display_Image(self, path):
        # Load an image from file into a QPixmap
        image = QtGui.QPixmap(path)

        # Create a QGraphicsScene and add the QPixmap to it
        scene = QtWidgets.QGraphicsScene()
        scene.addPixmap(image)

        # Set the QGraphicsScene to the QGraphicsView
        self.graphicsView.setScene(scene)

        # Show the QGraphicsView
        self.graphicsView.show()



def SetupCommunication():
    MCAST_GRP = '224.1.1.1'
    MCAST_PORT = 5007

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind(('', MCAST_PORT)) 
    mreq = struct.pack("4sl", socket.inet_aton(MCAST_GRP), socket.INADDR_ANY)
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
    sock.settimeout(10)
    return sock


def Receive_data(WindowUI, sock, stop_flag):
    print("started background task")
    while not stop_flag[0]:
        try:
            packet = sock.recv(4096)
        except:
            WindowUI.Display_Status("Connection lost", False)
        else:
            data = b'' + packet

            path = "Images\ImageReceivedMulticast.png"
            with open(path,"wb") as f:
                f.write(data)
                f.close()

            WindowUI.Display_Status("Image Received !", True)           
            WindowUI.Display_Image(path)

            print("Image received !")
    print("Background task ended")


def background_task(arg1, arg2, stop_flag):
    while not stop_flag[0]:
        print(arg1, arg2)
        time.sleep(1)
    print("background task finished")
    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()

    #Fait en sorte que la task en background se fasse tej quand on close la window
    app.setQuitOnLastWindowClosed(False)
    app.lastWindowClosed.connect(ui.FinishBackgroundTasks)

    future = ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    print("test ok")